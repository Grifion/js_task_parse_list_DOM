{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAK,SAAS,aAAa,CAAC,MAC5B,EAAa,EAAG,SAAS,gBAAgB,CAAC,QAyBhD,AAvBA,SAAkB,CAAI,EACpB,IAAM,EAAS,EAAK,IAAI,CACtB,SAAC,CAAA,CAAG,CADN,EACY,OAAA,EAAM,EAAE,OAAO,CAAC,MAAM,EAAI,EAAM,EAAE,OAAO,CAAC,MAAM,C,GAK5D,SAAS,EAAM,CAAG,EAChB,OAAO,SAAS,EAAI,OAAO,CAAC,QAAS,IACvC,CAJA,AAAA,EAAG,MAAM,CAAT,KAAA,CAAA,EAAU,EAAG,GAKf,EAaS,GAVe,AAWX,EAXgB,GAAG,CAAC,SAAC,CAAhC,EAA2C,MAAA,CACzC,KAAM,EAAM,SAAS,CACrB,SAAU,EAAM,OAAO,CAAC,QAAQ,CAChC,OAAQ,EAAM,OAAO,CAAC,MAAM,CAC5B,IAAK,EAAM,OAAO,CAAC,GAAG,AACxB,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar ul = document.querySelector(\"ul\");\nvar employees = _to_consumable_array(document.querySelectorAll(\"li\"));\nfunction sortList(list) {\n    var _ul;\n    var sorted = list.sort(function(a, b) {\n        return toInt(b.dataset.salary) - toInt(a.dataset.salary);\n    });\n    (_ul = ul).append.apply(_ul, _to_consumable_array(sorted));\n    function toInt(str) {\n        return parseInt(str.replace(/[$,]/g, \"\"));\n    }\n}\nfunction getEmployees(list) {\n    var employeesList = list.map(function(value) {\n        return {\n            name: value.innerText,\n            position: value.dataset.position,\n            salary: value.dataset.salary,\n            age: value.dataset.age\n        };\n    });\n    return employeesList;\n}\nsortList(employees);\ngetEmployees(employees);\n\n//# sourceMappingURL=index.559cbc13.js.map\n","'use strict';\n\nconst ul = document.querySelector('ul');\nconst employees = [...document.querySelectorAll('li')];\n\nfunction sortList(list) {\n  const sorted = list.sort(\n    (a, b) => toInt(b.dataset.salary) - toInt(a.dataset.salary),\n  );\n\n  ul.append(...sorted);\n\n  function toInt(str) {\n    return parseInt(str.replace(/[$,]/g, ''));\n  }\n}\n\nfunction getEmployees(list) {\n  const employeesList = list.map((value) => ({\n    name: value.innerText,\n    position: value.dataset.position,\n    salary: value.dataset.salary,\n    age: value.dataset.age,\n  }));\n\n  return employeesList;\n}\n\nsortList(employees);\ngetEmployees(employees);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","ul","document","querySelector","employees","querySelectorAll","sortList","list","sorted","sort","a","b","toInt","dataset","salary","str","parseInt","replace","append","apply","map","value","innerText","position","age"],"version":3,"file":"index.559cbc13.js.map"}